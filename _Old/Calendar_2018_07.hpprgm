// JMB 2018-07

// Valid dates are from 1582.1015 (Julian Day Number 2299161) to 9999.1231 (Julian Day Number 5373484)
// 1 January 4713 BCE, is Julian Day Number 0
// 17 November 1858 CE, is Modified Julian Day Number 0 
// 1 January 4713 BCE at noon UTC, is Julian Date (JD) 0.0
// 17 November 1858 CE at midnight UTC, is Modified Julian Date (MJD) 0.0. MJD = JD - 2400000.5 
// Valid times must be entered in HMS format, for example: 15°23'44" (15 h 23 min 44 s)
// Global variables TimeZone and DaylightSavingTime must be set to correct values, for example: 
// TimeZone:=5°30' (UTC + 5.5 hours), DaylightSavingTime:=1 (1=DST on, 0=DST off) 

#pragma mode( separator(.,;) integer(h32) )

Date_to_JDNumber(d)
// Auxiliary function to convert from a Date to a Julian Day Number
BEGIN
  2299161+DDAYS(1582.1015,d);
END;

JDNumber_to_Date(jdn)
// Auxiliary function to convert from a Julian Day Number to a Date
BEGIN
  DATEADD(1582.1015,jdn-2299161);
END;

Date_to_MJDNumber(d)
// Auxiliary function to convert from a Date to a Modified Julian Day Number
BEGIN
  DDAYS(1858.1117,d);
END;

MJDNumber_to_Date(mjdn)
// Auxiliary function to convert from a Modified Julian Day Number to a Date
BEGIN
  DATEADD(1858.1117,mjdn);
END;

Convert_Date_Time(dt,s)
// Auxiliary function to convert between Local and UTC
BEGIN
  LOCAL d:=dt(1), t:=dt(2);
  t:=t+s*(TimeZone+DaylightSavingTime);
  IF t < 0° THEN
    d:=DATEADD(d,-1);
    t:=t+24°;
  END;
  IF t ≥ 24° THEN
    d:=DATEADD(d,1);
    t:=t-24°;
  END;
  RETURN {d,t};
END;

EXPORT Is_Date_Valid(d)
// d:date → 1=valid date, 0=invalid date
BEGIN
  IFTE(d<1582.1015 OR d>9999.1231 OR DAYOFWEEK(d)<0, 0, 1);
END;

EXPORT Is_Leap_Year(d)
// d:date or year → 1=leap year, 0=ordinary year
BEGIN
  DAYOFWEEK(IP(d)+0.0229) > 0;
END;

EXPORT Century(d)
// d:date or year → century
BEGIN
  IP((d-1)/100)+1;
END;

EXPORT Year(d)
// d:date → year
BEGIN
  IP(d);
END;

EXPORT Month(d)
// d:date → month
BEGIN
  IP(FP(d)*100);
END;

EXPORT Day(d)
// d:date → day
BEGIN
  FP(FP(d)*100)*100;
END;

EXPORT Local_to_UTC(dt)
// dt:{Local date, Local time} → {UTC date, UTC time}
BEGIN
  Convert_Date_Time(dt,-1);
END;

EXPORT UTC_to_Local(dt)
// dt:{UTC date, UTC time} → {Local date, Local time}
BEGIN
  Convert_Date_Time(dt,1);
END;

EXPORT UTC_to_JD(dt)
// dt:{UTC date, UTC time} → Julian Date
BEGIN
  Date_to_JDNumber(dt(1)) - 0.5 + HMS→(dt(2))/24;
END;

EXPORT JD_to_UTC(jd)
// jd:Julian Date → {UTC date, UTC time}
BEGIN
  LOCAL jdn:=IP(jd), t:= FP(jd);
  IF t ≥ 0.5 THEN
    jdn:=jdn+1;
    t:=→HMS((t-0.5)*24);
  ELSE
    t:=→HMS(t*24+12);
  END;
  RETURN {JDNumber_to_Date(jdn),ROUND(t,4)};
END;  

EXPORT Local_to_JD(dt)
// dt:{Local date, Local time} → Julian Date
BEGIN
  UTC_to_JD(Local_to_UTC(dt));  
END;  

EXPORT JD_to_Local(jd)
// jd:Julian Date → {Local date, Local time}
BEGIN
  UTC_to_Local(JD_to_UTC(jd));
END;  

EXPORT JD_to_MJD(jd)
// jd:Julian Date → Modified Julian Date
BEGIN
  jd-2400000.5;
END;

EXPORT MJD_to_JD(mjd)
// mjd:Modified Julian Date → Julian Date
BEGIN
  mjd+2400000.5;
END;

EXPORT UTC_to_MJD(dt)
// dt:{UTC date, UTC time} → Modified Julian Date
BEGIN
  Date_to_MJDNumber(dt(1)) + HMS→(dt(2))/24;
END;

EXPORT MJD_to_UTC(mjd)
// mjd:Modified Julian Date → {UTC date, UTC time}
BEGIN
  LOCAL mjdn:=IP(mjd), t:= →HMS(FP(mjd)*24);
  RETURN {MJDNumber_to_Date(mjdn),ROUND(t,4)};
END;

EXPORT Local_to_MJD(dt)
// dt:{Local date, Local time} → Modified Julian Date
BEGIN
  UTC_to_MJD(Local_to_UTC(dt));
END;

EXPORT MJD_to_Local(mjd)
// mjd:Modified Julian Date → {Local date, Local time}
BEGIN
  UTC_to_Local(MJD_to_UTC(mjd));
END;

EXPORT Now
// → {{Local date, Local time}, {UTC date, UTC time}, Julian Date, Modified Julian Date}
BEGIN
  LOCAL d:=Date, t:=Time;
  {{d,t},Local_to_UTC({d,t}),Local_to_JD({d,t}),Local_to_MJD({d,t})};
END;

EXPORT Now_Local
// → {Local date, Local time}
BEGIN
  LOCAL n:=Now;
  n(1);
END;

EXPORT Now_UTC
// → {UTC date, UTC time}
BEGIN
  LOCAL n:=Now;
  n(2);
END;

EXPORT Now_JD
// → {Julian Date}
BEGIN
  LOCAL n:=Now;
  n(3);
END;

EXPORT Now_MJD
// → {Modified Julian Date}
BEGIN
  LOCAL n:=Now;
  n(4);
END;

EXPORT Week_Number(d)
// d:date → week number (ISO 8601)
BEGIN
  LOCAL yr:=Year(d), mn:=Month(d), dy:=Day(d);
  LOCAL DoW_0101:=IFTE(yr==1582,1,DAYOFWEEK(yr+0.0101));  
  LOCAL DoW_Yp1_0101:=IFTE(yr==9999,6,DAYOFWEEK(yr+1.0101));
  LOCAL wn:=IP((IFTE(yr==1582,Date_to_JDNumber(d)-2298884,DDAYS(yr+0.0101,d))+DoW_0101-1)/7);
  IF mn==12 AND DoW_Yp1_0101≤4 AND (32-dy)<DoW_Yp1_0101 THEN
    RETURN 1;
  ELSE
    IF DoW_0101 ≤ 4 THEN
      RETURN wn+1;
    ELSE
      IF mn==1 AND (9-dy)>DoW_0101 THEN
        RETURN Week_Number(yr-1+0.1231);
      ELSE
        RETURN wn;
      END;
    END;
  END;
END;

EXPORT Easter(y)
// y:year → date of Easter Sunday
BEGIN
  LOCAL a,b,c,d,e,f,g;
  LOCAL h,i,k,l,m,n;
  CASE
    IF y<1582 THEN
      RETURN 0; 
    END;
    IF y==1582 THEN
      RETURN 1582.0415;
    END;
    IF y > 1582 THEN
      a:=irem(y,19);
      b:=iquo(y,100);
      c:=irem(y,100);
      d:=iquo(b,4);
      e:=irem(b,4);
      f:=iquo(b+8,25);
      g:=iquo(b-f+1,3);
      h:=irem(19*a+b-d-g+15,30);
      i:=iquo(c,4);
      k:=irem(c,4);
      l:=irem(32+2*e+2*i-h-k,7);
      m:=iquo(a+11*h+22*l,451);
      n:=h+l-7*m+114;
      RETURN y + iquo(n,31)/100 + (irem(n,31)+1)/10000;
    END;
  END;
END;