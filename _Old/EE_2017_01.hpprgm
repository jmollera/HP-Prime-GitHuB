// JMB 2017-01

#pragma mode( separator(.,;) integer(h32) )

EXPORT kcmil_to_mm2(kcmil)
// kcmil:area in kcmil → area in mm²
BEGIN
  kcmil*0.506707479098;
END;

EXPORT mm2_to_kcmil(mm2)
// mm2:area in mm² → area in kcmil
BEGIN
  mm2/0.506707479098;
END;

EXPORT AWG_to_mm2(AWG)
// AWG:AWG number → area in mm²
// 0, -1, -2 and -3 must be entered for AWG numbers 1/0, 2/0, 3/0 and 4/0
BEGIN
  53.4751207321/(92^(AWG/19.5));
END;

EXPORT mm2_to_AWG(mm2)
// mm2:area in mm² → nearest AWG number
// results 0, -1, -2 and -3 are equivalent to AWG numbers 1/0, 2/0, 3/0 and 4/0
BEGIN
  ROUND(4.31245284200*LN(53.4751207321/mm2),0);
END;

EXPORT Delta_to_Wye(zd)
// zd:delta impedances [Zab,Zbc,Zca] → star impedances [Zan,Zbn,Zcn]
BEGIN
  LOCAL z:=ΠLIST(zd)/ΣLIST(zd);
  [z/zd(2),z/zd(3),z/zd(1)];
END;

EXPORT Wye_to_Delta(zy)
// zy:star impedances [Zan,Zbn,Zcn] → delta impedances [Zab,Zbc,Zca]
BEGIN
  LOCAL z:=zy(1)*(zy(2)+zy(3))+zy(2)*zy(3);
  [z/zy(3),z/zy(1),z/zy(2)];
END;

EXPORT EZS_U(E,Z,S)
// E:voltage source, Z:impedance, S:load power → load voltage U
BEGIN
  LOCAL ZcS:=CONJ(Z)*S;
  LOCAL ImUe:=IM(ZcS)/ABS(E);
  LOCAL ReUe:=POLYROOT({1,−ABS(E),RE(ZcS)+ImUe^2});  
  IF TYPE(ReUe(1))==3 THEN
    "No solution"; // complex roots
  ELSE
    (MAX(ReUe),ImUe)*SIGN(E);
  END;
END;

EXPORT Millman(u,z)
// u:voltages [Uax,Ubx,Ucx,...], z:impedances [Zan,Zbn,Zcn,...] → voltage Unx 
BEGIN
  ΣLIST(u ./ z)/ΣLIST(z .^ (−1));
END;

EXPORT Triangle_to_Phasors(v)
// v:voltages triangle [Uab,Ubc,Uca] → voltage phasors [Uab,Ubc,Uca]
// voltage Uab is taken as the reference phasor (angle equal to zero)
BEGIN
  LOCAL φ:=Triangle_Solver.SSS(v(1),v(3),v(2));
  [v(1),v(2)*(−1,0)*(1,∡φ(2)),v(3)*(−1,0)/(1,∡φ(3))];
END;

EXPORT LN_to_LL(v)
// v:line-neutral voltages [Uan,Ubn,Ucn] → line-line voltages [Uab,Ubc,Uca]
BEGIN
  [v(1)-v(2),v(2)-v(3),v(3)-v(1)];
END;

EXPORT LL_to_LG(v)
// v:line-line voltages [Uab,Ubc,Uca] → line-G voltages [Uag,Ubg,Ucg]
// G is the barycenter of the line-line voltages triangle
BEGIN
  [v(1),0,-v(2)] .- (v(1)-v(2))/3;
END;

EXPORT ABC_to_A012(v)
// v:phasors [A,B,C] → sequence phasors [A0,A1,A2]
BEGIN
  LOCAL a:=(-1/2,√3/2);
  [[1,1,1],[1,a,a^2],[1,a^2,a]]*v/3;
END;

EXPORT A012_to_ABC(v)
// v:sequence phasors [A0,A1,A2] → phasors [A,B,C]
BEGIN
  LOCAL a:=(-1/2,√3/2);
  [[1,1,1],[1,a^2,a],[1,a,a^2]]*v;
END;

EXPORT AN12_to_AB12(v)
// v:line-neutral sequence phasors [AN1,AN2] → line-line sequence phasors [AB1,AB2]
BEGIN
  √3*[v(1)*exp(π*/6),v(2)*exp(-π*/6)];
END;

EXPORT AB12_to_AN12(v)
// v:line-line sequence phasors [AB1,AB2] → line-neutral sequence phasors [AN1,AN2]
BEGIN
  [v(1)/exp(π*/6),v(2)/exp(-π*/6)]/√3;
END;